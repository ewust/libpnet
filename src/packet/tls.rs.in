// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.

// First crack at TLS 1.2 (RFC 5246)

//use packet::PrimitiveValues;
use packet::Packet;

use pnet_macros_support::types::*;

/// TLS Record Content Types
#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub mod TlsContentType {

    /// Change Cipher Specification (begin encryption)
    pub const ChangeCipherSpec: u8 = 20;
    /// Alert record (error occurred)
    pub const Alert : u8 = 21;
    /// Handshake (ClientHello, ServerHello, Certificate, KeyExchange, Finished, etc)
    pub const Handshake : u8 = 22;
    /// Encrypted Data record
    pub const ApplicationData : u8 = 23;
}

/// TLS Handshake Types
#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
pub mod TlsHandshakeType {
    //use pnet_macros_support::types::*;

    /*
          hello_request(0), client_hello(1), server_hello(2),
          certificate(11), server_key_exchange (12),
          certificate_request(13), server_hello_done(14),
          certificate_verify(15), client_key_exchange(16),
          finished(20), (255)
    */
    /// Hello Request (rarely used)
    pub const HelloRequest : u8 = 0;
    /// Client Hello
    pub const ClientHello : u8 = 1;
    /// Server Hello
    pub const ServerHello : u8 = 2;
    /// Server Certificate
    pub const Certificate : u8 = 11;
    /// Server Key Exchange (optional)
    pub const ServerKeyExchange : u8 = 12;
    /// Client Certificate Request (rarely used)
    pub const CertificateRequest : u8 = 13;
    /// Server Hello Done
    pub const ServerHelloDone : u8 = 14;
    /// Certificate Verify
    pub const CertificateVerify : u8 = 15;
    /// Client Key Exchange
    pub const ClientKeyExchange : u8 = 16;
    /// Finished message (sent by Client and Server)
    pub const Finished : u8 = 20;
}

/// Represents a TLS record packet
#[packet]
pub struct TlsRecord {
    content_type: u8,
    version: u16be,
    length: u16be,

    #[length = "length"]
    #[payload]
    payload: Vec<u8>,
}

/// TLS Handshake packet, generally wrapped in a TLS Record
#[packet]
pub struct TlsHandshake {
    handshake_type: u8,
    length: u24be,
    #[payload]
    payload: Vec<u8>,
}

/// TLS Extensions can appear in ClientHello and ServerHello packets
#[packet]
pub struct TlsExtension {
    extension_type: u16be,
    length: u16be,

    #[length = "length"]
    #[payload]
    payload: Vec<u8>,
}



/// ClientHello, wrapped by a TlsHandshake (which is wrapped by a TlsRecord)
#[packet]
pub struct TlsClientHello {
    client_version: u16be,
    #[length = "32"]
    random: Vec<u8>,

    session_id_length: u8,
    #[length = "session_id_length"]
    session_id: Vec<u8>,

    cipher_suites_length: u16be,
    #[length = "cipher_suites_length"]
    cipher_suites: Vec<u16be>,

    compression_methods_length: u8,
    #[length = "compression_methods_length"]
    compression_methods: Vec<u8>,

    extensions_length: u16be,
    #[length = "extensions_length"]
    extensions: Vec<TlsExtension>,

    #[payload]
    payload: Vec<u8>,   // Unused? Fragment for next packet?
}

/// TLS alert packet (wrapped by a TlsRecord)
#[packet]
pub struct TlsAlert {
    alert_level: u8,
    alert_description: u8,
    // TODO
    #[payload]
    payload: Vec<u8>,
}

/// Application Data (wrapped by a TlsRecord)
#[packet]
pub struct TlsApplicationData {
    // TODO
    #[payload]
    payload: Vec<u8>,
}


#[test]
fn tls_client_hello_test() {
    let mut packet = [0u8; 88];
    {
        let mut tls_record = MutableTlsRecordPacket::new(&mut packet[..]).unwrap();

        tls_record.set_content_type(TlsContentType::Handshake);
        tls_record.set_version(0x0301);
        tls_record.set_length(192);
    }

    {
        let mut tls_handshake = MutableTlsHandshakePacket::new(&mut packet[5..]).unwrap();
        tls_handshake.set_handshake_type(TlsHandshakeType::ClientHello);
        tls_handshake.set_length(188);
    }

    {
        let mut tls_hello = MutableTlsClientHelloPacket::new(&mut packet[9..]).unwrap();

        tls_hello.set_client_version(0x0303);
        tls_hello.set_random(&vec![0xae, 0xf5, 0x79, 0x3a, 0x91, 0x9e, 0x59, 0x31, 0x33, 0x76, 0x76, 0xbc, 0x44, 0x5b, 0xda, 0xa4, 0xe6, 0xc6, 0x66, 0xd5, 0x7a, 0xff, 0x77, 0x4e, 0x4f, 0x11, 0xd1, 0x54, 0xeb, 0x2c, 0x89, 0x24]);
        tls_hello.set_session_id(&vec![]);

        tls_hello.set_cipher_suites_length(19*2);
        tls_hello.set_cipher_suites(&vec![0xc02b, 0xc02f, 0x009e, 0x009c, 0xc00a, 0xc014, 0x0039, 0x0035, 0xc007, 0xc009, 0xc011, 0xc013, 0x0033, 0x0032, 0x0005, 0x0004, 0x002f, 0x000a, 0x00ff]);
        tls_hello.set_compression_methods_length(1);
        tls_hello.set_compression_methods(&vec![0x00]);
        tls_hello.set_extensions_length(109);
        //let ec_pts_fmt = TlsExtension::new(
    }

    let ref_pkt = [0x16, 0x3, 0x1, 0x0, 0xc0, 0x1, 0x0, 0x0, 0xbc, 0x3, 0x3, 0xae, 0xf5, 0x79, 0x3a, 0x91, 0x9e, 0x59, 0x31, 0x33, 0x76, 0x76, 0xbc, 0x44, 0x5b, 0xda, 0xa4, 0xe6, 0xc6, 0x66, 0xd5, 0x7a, 0xff, 0x77, 0x4e, 0x4f, 0x11, 0xd1, 0x54, 0xeb, 0x2c, 0x89, 0x24, 0x0, 0x0, 0x26, 0xc0, 0x2b, 0xc0, 0x2f, 0x0, 0x9e, 0x0, 0x9c, 0xc0, 0xa, 0xc0, 0x14, 0x0, 0x39, 0x0, 0x35, 0xc0, 0x7, 0xc0, 0x9, 0xc0, 0x11, 0xc0, 0x13, 0x0, 0x33, 0x0, 0x32, 0x0, 0x5, 0x0, 0x4, 0x0, 0x2f, 0x0, 0xa, 0x0, 0xff, 0x1, 0x0, 0x0, 0x6d];
    assert_eq!(&ref_pkt[..], &packet[..]);

}


/*
/// Alert descriptions, for TlsAlert
pub mod TlsAlertDescription {
    //use pnet_macros_support::types::*;

    TODO
          close_notify(0),
          unexpected_message(10),
          bad_record_mac(20),
          decryption_failed_RESERVED(21),
          record_overflow(22),
          decompression_failure(30),
          handshake_failure(40),
          no_certificate_RESERVED(41),
          bad_certificate(42),
          unsupported_certificate(43),
          certificate_revoked(44),
          certificate_expired(45),
          certificate_unknown(46),
          illegal_parameter(47),
          unknown_ca(48),
          access_denied(49),
          decode_error(50),
          decrypt_error(51),
          export_restriction_RESERVED(60),
          protocol_version(70),
          insufficient_security(71),
          internal_error(80),
          user_canceled(90),
          no_renegotiation(100),
          unsupported_extension(110),
}

*/



/// List of cipher suites
#[allow(non_snake_case)]
#[allow(non_upper_case_globals)]
#[allow(missing_docs)]
pub mod CipherSuites {
    use pnet_macros_support::types::*;

    pub const TLS_NULL_WITH_NULL_NULL: u16be = 0x0000;
    pub const TLS_RSA_WITH_NULL_MD5: u16be = 0x0001;
    pub const TLS_RSA_WITH_NULL_SHA: u16be = 0x0002;
    pub const TLS_RSA_EXPORT_WITH_RC4_40_MD5: u16be = 0x0003;
    pub const TLS_RSA_WITH_RC4_128_MD5: u16be = 0x0004;
    pub const TLS_RSA_WITH_RC4_128_SHA: u16be = 0x0005;
    pub const TLS_RSA_EXPORT_WITH_RC2_CBC_40_MD5: u16be = 0x0006;
    pub const TLS_RSA_WITH_IDEA_CBC_SHA: u16be = 0x0007;
    pub const TLS_RSA_EXPORT_WITH_DES40_CBC_SHA: u16be = 0x0008;
    pub const TLS_RSA_WITH_DES_CBC_SHA: u16be = 0x0009;
    pub const TLS_RSA_WITH_3DES_EDE_CBC_SHA: u16be = 0x000a;
    pub const TLS_DH_DSS_EXPORT_WITH_DES40_CBC_SHA: u16be = 0x000b;
    pub const TLS_DH_DSS_WITH_DES_CBC_SHA: u16be = 0x000c;
    pub const TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA: u16be = 0x000d;
    pub const TLS_DH_RSA_EXPORT_WITH_DES40_CBC_SHA: u16be = 0x000e;
    pub const TLS_DH_RSA_WITH_DES_CBC_SHA: u16be = 0x000f;
    pub const TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA: u16be = 0x0010;
    pub const TLS_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: u16be = 0x0011;
    pub const TLS_DHE_DSS_WITH_DES_CBC_SHA: u16be = 0x0012;
    pub const TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: u16be = 0x0013;
    pub const TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: u16be = 0x0014;
    pub const TLS_DHE_RSA_WITH_DES_CBC_SHA: u16be = 0x0015;
    pub const TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: u16be = 0x0016;
    pub const TLS_DH_anon_EXPORT_WITH_RC4_40_MD5: u16be = 0x0017;
    pub const TLS_DH_anon_WITH_RC4_128_MD5: u16be = 0x0018;
    pub const TLS_DH_anon_EXPORT_WITH_DES40_CBC_SHA: u16be = 0x0019;
    pub const TLS_DH_anon_WITH_DES_CBC_SHA: u16be = 0x001a;
    pub const TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: u16be = 0x001b;
    pub const TLS_KRB5_WITH_DES_CBC_SHA: u16be = 0x001e;
    pub const TLS_KRB5_WITH_3DES_EDE_CBC_SHA: u16be = 0x001f;
    pub const TLS_KRB5_WITH_RC4_128_SHA: u16be = 0x0020;
    pub const TLS_KRB5_WITH_IDEA_CBC_SHA: u16be = 0x0021;
    pub const TLS_KRB5_WITH_DES_CBC_MD5: u16be = 0x0022;
    pub const TLS_KRB5_WITH_3DES_EDE_CBC_MD5: u16be = 0x0023;
    pub const TLS_KRB5_WITH_RC4_128_MD5: u16be = 0x0024;
    pub const TLS_KRB5_WITH_IDEA_CBC_MD5: u16be = 0x0025;
    pub const TLS_KRB5_EXPORT_WITH_DES_CBC_40_SHA: u16be = 0x0026;
    pub const TLS_KRB5_EXPORT_WITH_RC2_CBC_40_SHA: u16be = 0x0027;
    pub const TLS_KRB5_EXPORT_WITH_RC4_40_SHA: u16be = 0x0028;
    pub const TLS_KRB5_EXPORT_WITH_DES_CBC_40_MD5: u16be = 0x0029;
    pub const TLS_KRB5_EXPORT_WITH_RC2_CBC_40_MD5: u16be = 0x002a;
    pub const TLS_KRB5_EXPORT_WITH_RC4_40_MD5: u16be = 0x002b;
    pub const TLS_PSK_WITH_NULL_SHA: u16be = 0x002c;
    pub const TLS_DHE_PSK_WITH_NULL_SHA: u16be = 0x002d;
    pub const TLS_RSA_PSK_WITH_NULL_SHA: u16be = 0x002e;
    pub const TLS_RSA_WITH_AES_128_CBC_SHA: u16be = 0x002f;
    pub const TLS_DH_DSS_WITH_AES_128_CBC_SHA: u16be = 0x0030;
    pub const TLS_DH_RSA_WITH_AES_128_CBC_SHA: u16be = 0x0031;
    pub const TLS_DHE_DSS_WITH_AES_128_CBC_SHA: u16be = 0x0032;
    pub const TLS_DHE_RSA_WITH_AES_128_CBC_SHA: u16be = 0x0033;
    pub const TLS_DH_anon_WITH_AES_128_CBC_SHA: u16be = 0x0034;
    pub const TLS_RSA_WITH_AES_256_CBC_SHA: u16be = 0x0035;
    pub const TLS_DH_DSS_WITH_AES_256_CBC_SHA: u16be = 0x0036;
    pub const TLS_DH_RSA_WITH_AES_256_CBC_SHA: u16be = 0x0037;
    pub const TLS_DHE_DSS_WITH_AES_256_CBC_SHA: u16be = 0x0038;
    pub const TLS_DHE_RSA_WITH_AES_256_CBC_SHA: u16be = 0x0039;
    pub const TLS_DH_anon_WITH_AES_256_CBC_SHA: u16be = 0x003a;
    pub const TLS_RSA_WITH_NULL_SHA256: u16be = 0x003b;
    pub const TLS_RSA_WITH_AES_128_CBC_SHA256: u16be = 0x003c;
    pub const TLS_RSA_WITH_AES_256_CBC_SHA256: u16be = 0x003d;
    pub const TLS_DH_DSS_WITH_AES_128_CBC_SHA256: u16be = 0x003e;
    pub const TLS_DH_RSA_WITH_AES_128_CBC_SHA256: u16be = 0x003f;
    pub const TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: u16be = 0x0040;
    pub const TLS_RSA_WITH_CAMELLIA_128_CBC_SHA: u16be = 0x0041;
    pub const TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA: u16be = 0x0042;
    pub const TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA: u16be = 0x0043;
    pub const TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA: u16be = 0x0044;
    pub const TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA: u16be = 0x0045;
    pub const TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA: u16be = 0x0046;
    pub const TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: u16be = 0x0067;
    pub const TLS_DH_DSS_WITH_AES_256_CBC_SHA256: u16be = 0x0068;
    pub const TLS_DH_RSA_WITH_AES_256_CBC_SHA256: u16be = 0x0069;
    pub const TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: u16be = 0x006a;
    pub const TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: u16be = 0x006b;
    pub const TLS_DH_anon_WITH_AES_128_CBC_SHA256: u16be = 0x006c;
    pub const TLS_DH_anon_WITH_AES_256_CBC_SHA256: u16be = 0x006d;
    pub const TLS_RSA_WITH_CAMELLIA_256_CBC_SHA: u16be = 0x0084;
    pub const TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA: u16be = 0x0085;
    pub const TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA: u16be = 0x0086;
    pub const TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA: u16be = 0x0087;
    pub const TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA: u16be = 0x0088;
    pub const TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA: u16be = 0x0089;
    pub const TLS_PSK_WITH_RC4_128_SHA: u16be = 0x008a;
    pub const TLS_PSK_WITH_3DES_EDE_CBC_SHA: u16be = 0x008b;
    pub const TLS_PSK_WITH_AES_128_CBC_SHA: u16be = 0x008c;
    pub const TLS_PSK_WITH_AES_256_CBC_SHA: u16be = 0x008d;
    pub const TLS_DHE_PSK_WITH_RC4_128_SHA: u16be = 0x008e;
    pub const TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA: u16be = 0x008f;
    pub const TLS_DHE_PSK_WITH_AES_128_CBC_SHA: u16be = 0x0090;
    pub const TLS_DHE_PSK_WITH_AES_256_CBC_SHA: u16be = 0x0091;
    pub const TLS_RSA_PSK_WITH_RC4_128_SHA: u16be = 0x0092;
    pub const TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA: u16be = 0x0093;
    pub const TLS_RSA_PSK_WITH_AES_128_CBC_SHA: u16be = 0x0094;
    pub const TLS_RSA_PSK_WITH_AES_256_CBC_SHA: u16be = 0x0095;
    pub const TLS_RSA_WITH_SEED_CBC_SHA: u16be = 0x0096;
    pub const TLS_DH_DSS_WITH_SEED_CBC_SHA: u16be = 0x0097;
    pub const TLS_DH_RSA_WITH_SEED_CBC_SHA: u16be = 0x0098;
    pub const TLS_DHE_DSS_WITH_SEED_CBC_SHA: u16be = 0x0099;
    pub const TLS_DHE_RSA_WITH_SEED_CBC_SHA: u16be = 0x009a;
    pub const TLS_DH_anon_WITH_SEED_CBC_SHA: u16be = 0x009b;
    pub const TLS_RSA_WITH_AES_128_GCM_SHA256: u16be = 0x009c;
    pub const TLS_RSA_WITH_AES_256_GCM_SHA384: u16be = 0x009d;
    pub const TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: u16be = 0x009e;
    pub const TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: u16be = 0x009f;
    pub const TLS_DH_RSA_WITH_AES_128_GCM_SHA256: u16be = 0x00a0;
    pub const TLS_DH_RSA_WITH_AES_256_GCM_SHA384: u16be = 0x00a1;
    pub const TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: u16be = 0x00a2;
    pub const TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: u16be = 0x00a3;
    pub const TLS_DH_DSS_WITH_AES_128_GCM_SHA256: u16be = 0x00a4;
    pub const TLS_DH_DSS_WITH_AES_256_GCM_SHA384: u16be = 0x00a5;
    pub const TLS_DH_anon_WITH_AES_128_GCM_SHA256: u16be = 0x00a6;
    pub const TLS_DH_anon_WITH_AES_256_GCM_SHA384: u16be = 0x00a7;
    pub const TLS_PSK_WITH_AES_128_GCM_SHA256: u16be = 0x00a8;
    pub const TLS_PSK_WITH_AES_256_GCM_SHA384: u16be = 0x00a9;
    pub const TLS_DHE_PSK_WITH_AES_128_GCM_SHA256: u16be = 0x00aa;
    pub const TLS_DHE_PSK_WITH_AES_256_GCM_SHA384: u16be = 0x00ab;
    pub const TLS_RSA_PSK_WITH_AES_128_GCM_SHA256: u16be = 0x00ac;
    pub const TLS_RSA_PSK_WITH_AES_256_GCM_SHA384: u16be = 0x00ad;
    pub const TLS_PSK_WITH_AES_128_CBC_SHA256: u16be = 0x00ae;
    pub const TLS_PSK_WITH_AES_256_CBC_SHA384: u16be = 0x00af;
    pub const TLS_PSK_WITH_NULL_SHA256: u16be = 0x00b0;
    pub const TLS_PSK_WITH_NULL_SHA384: u16be = 0x00b1;
    pub const TLS_DHE_PSK_WITH_AES_128_CBC_SHA256: u16be = 0x00b2;
    pub const TLS_DHE_PSK_WITH_AES_256_CBC_SHA384: u16be = 0x00b3;
    pub const TLS_DHE_PSK_WITH_NULL_SHA256: u16be = 0x00b4;
    pub const TLS_DHE_PSK_WITH_NULL_SHA384: u16be = 0x00b5;
    pub const TLS_RSA_PSK_WITH_AES_128_CBC_SHA256: u16be = 0x00b6;
    pub const TLS_RSA_PSK_WITH_AES_256_CBC_SHA384: u16be = 0x00b7;
    pub const TLS_RSA_PSK_WITH_NULL_SHA256: u16be = 0x00b8;
    pub const TLS_RSA_PSK_WITH_NULL_SHA384: u16be = 0x00b9;
    pub const TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0x00ba;
    pub const TLS_DH_DSS_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0x00bb;
    pub const TLS_DH_RSA_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0x00bc;
    pub const TLS_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0x00bd;
    pub const TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0x00be;
    pub const TLS_DH_anon_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0x00bf;
    pub const TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256: u16be = 0x00c0;
    pub const TLS_DH_DSS_WITH_CAMELLIA_256_CBC_SHA256: u16be = 0x00c1;
    pub const TLS_DH_RSA_WITH_CAMELLIA_256_CBC_SHA256: u16be = 0x00c2;
    pub const TLS_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA256: u16be = 0x00c3;
    pub const TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256: u16be = 0x00c4;
    pub const TLS_DH_anon_WITH_CAMELLIA_256_CBC_SHA256: u16be = 0x00c5;
    pub const TLS_EMPTY_RENEGOTIATION_INFO_SCSV: u16be = 0x00ff;
    pub const TLS_FALLBACK_SCSV: u16be = 0x5600;
    pub const TLS_ECDH_ECDSA_WITH_NULL_SHA: u16be = 0xc001;
    pub const TLS_ECDH_ECDSA_WITH_RC4_128_SHA: u16be = 0xc002;
    pub const TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: u16be = 0xc003;
    pub const TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: u16be = 0xc004;
    pub const TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: u16be = 0xc005;
    pub const TLS_ECDHE_ECDSA_WITH_NULL_SHA: u16be = 0xc006;
    pub const TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: u16be = 0xc007;
    pub const TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: u16be = 0xc008;
    pub const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: u16be = 0xc009;
    pub const TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: u16be = 0xc00a;
    pub const TLS_ECDH_RSA_WITH_NULL_SHA: u16be = 0xc00b;
    pub const TLS_ECDH_RSA_WITH_RC4_128_SHA: u16be = 0xc00c;
    pub const TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: u16be = 0xc00d;
    pub const TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: u16be = 0xc00e;
    pub const TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: u16be = 0xc00f;
    pub const TLS_ECDHE_RSA_WITH_NULL_SHA: u16be = 0xc010;
    pub const TLS_ECDHE_RSA_WITH_RC4_128_SHA: u16be = 0xc011;
    pub const TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: u16be = 0xc012;
    pub const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: u16be = 0xc013;
    pub const TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: u16be = 0xc014;
    pub const TLS_ECDH_anon_WITH_NULL_SHA: u16be = 0xc015;
    pub const TLS_ECDH_anon_WITH_RC4_128_SHA: u16be = 0xc016;
    pub const TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: u16be = 0xc017;
    pub const TLS_ECDH_anon_WITH_AES_128_CBC_SHA: u16be = 0xc018;
    pub const TLS_ECDH_anon_WITH_AES_256_CBC_SHA: u16be = 0xc019;
    pub const TLS_SRP_SHA_WITH_3DES_EDE_CBC_SHA: u16be = 0xc01a;
    pub const TLS_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA: u16be = 0xc01b;
    pub const TLS_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA: u16be = 0xc01c;
    pub const TLS_SRP_SHA_WITH_AES_128_CBC_SHA: u16be = 0xc01d;
    pub const TLS_SRP_SHA_RSA_WITH_AES_128_CBC_SHA: u16be = 0xc01e;
    pub const TLS_SRP_SHA_DSS_WITH_AES_128_CBC_SHA: u16be = 0xc01f;
    pub const TLS_SRP_SHA_WITH_AES_256_CBC_SHA: u16be = 0xc020;
    pub const TLS_SRP_SHA_RSA_WITH_AES_256_CBC_SHA: u16be = 0xc021;
    pub const TLS_SRP_SHA_DSS_WITH_AES_256_CBC_SHA: u16be = 0xc022;
    pub const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: u16be = 0xc023;
    pub const TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: u16be = 0xc024;
    pub const TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: u16be = 0xc025;
    pub const TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: u16be = 0xc026;
    pub const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: u16be = 0xc027;
    pub const TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: u16be = 0xc028;
    pub const TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: u16be = 0xc029;
    pub const TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: u16be = 0xc02a;
    pub const TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: u16be = 0xc02b;
    pub const TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: u16be = 0xc02c;
    pub const TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: u16be = 0xc02d;
    pub const TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: u16be = 0xc02e;
    pub const TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: u16be = 0xc02f;
    pub const TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: u16be = 0xc030;
    pub const TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: u16be = 0xc031;
    pub const TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: u16be = 0xc032;
    pub const TLS_ECDHE_PSK_WITH_RC4_128_SHA: u16be = 0xc033;
    pub const TLS_ECDHE_PSK_WITH_3DES_EDE_CBC_SHA: u16be = 0xc034;
    pub const TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: u16be = 0xc035;
    pub const TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: u16be = 0xc036;
    pub const TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA256: u16be = 0xc037;
    pub const TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA384: u16be = 0xc038;
    pub const TLS_ECDHE_PSK_WITH_NULL_SHA: u16be = 0xc039;
    pub const TLS_ECDHE_PSK_WITH_NULL_SHA256: u16be = 0xc03a;
    pub const TLS_ECDHE_PSK_WITH_NULL_SHA384: u16be = 0xc03b;
    pub const TLS_RSA_WITH_ARIA_128_CBC_SHA256: u16be = 0xc03c;
    pub const TLS_RSA_WITH_ARIA_256_CBC_SHA384: u16be = 0xc03d;
    pub const TLS_DH_DSS_WITH_ARIA_128_CBC_SHA256: u16be = 0xc03e;
    pub const TLS_DH_DSS_WITH_ARIA_256_CBC_SHA384: u16be = 0xc03f;
    pub const TLS_DH_RSA_WITH_ARIA_128_CBC_SHA256: u16be = 0xc040;
    pub const TLS_DH_RSA_WITH_ARIA_256_CBC_SHA384: u16be = 0xc041;
    pub const TLS_DHE_DSS_WITH_ARIA_128_CBC_SHA256: u16be = 0xc042;
    pub const TLS_DHE_DSS_WITH_ARIA_256_CBC_SHA384: u16be = 0xc043;
    pub const TLS_DHE_RSA_WITH_ARIA_128_CBC_SHA256: u16be = 0xc044;
    pub const TLS_DHE_RSA_WITH_ARIA_256_CBC_SHA384: u16be = 0xc045;
    pub const TLS_DH_anon_WITH_ARIA_128_CBC_SHA256: u16be = 0xc046;
    pub const TLS_DH_anon_WITH_ARIA_256_CBC_SHA384: u16be = 0xc047;
    pub const TLS_ECDHE_ECDSA_WITH_ARIA_128_CBC_SHA256: u16be = 0xc048;
    pub const TLS_ECDHE_ECDSA_WITH_ARIA_256_CBC_SHA384: u16be = 0xc049;
    pub const TLS_ECDH_ECDSA_WITH_ARIA_128_CBC_SHA256: u16be = 0xc04a;
    pub const TLS_ECDH_ECDSA_WITH_ARIA_256_CBC_SHA384: u16be = 0xc04b;
    pub const TLS_ECDHE_RSA_WITH_ARIA_128_CBC_SHA256: u16be = 0xc04c;
    pub const TLS_ECDHE_RSA_WITH_ARIA_256_CBC_SHA384: u16be = 0xc04d;
    pub const TLS_ECDH_RSA_WITH_ARIA_128_CBC_SHA256: u16be = 0xc04e;
    pub const TLS_ECDH_RSA_WITH_ARIA_256_CBC_SHA384: u16be = 0xc04f;
    pub const TLS_RSA_WITH_ARIA_128_GCM_SHA256: u16be = 0xc050;
    pub const TLS_RSA_WITH_ARIA_256_GCM_SHA384: u16be = 0xc051;
    pub const TLS_DHE_RSA_WITH_ARIA_128_GCM_SHA256: u16be = 0xc052;
    pub const TLS_DHE_RSA_WITH_ARIA_256_GCM_SHA384: u16be = 0xc053;
    pub const TLS_DH_RSA_WITH_ARIA_128_GCM_SHA256: u16be = 0xc054;
    pub const TLS_DH_RSA_WITH_ARIA_256_GCM_SHA384: u16be = 0xc055;
    pub const TLS_DHE_DSS_WITH_ARIA_128_GCM_SHA256: u16be = 0xc056;
    pub const TLS_DHE_DSS_WITH_ARIA_256_GCM_SHA384: u16be = 0xc057;
    pub const TLS_DH_DSS_WITH_ARIA_128_GCM_SHA256: u16be = 0xc058;
    pub const TLS_DH_DSS_WITH_ARIA_256_GCM_SHA384: u16be = 0xc059;
    pub const TLS_DH_anon_WITH_ARIA_128_GCM_SHA256: u16be = 0xc05a;
    pub const TLS_DH_anon_WITH_ARIA_256_GCM_SHA384: u16be = 0xc05b;
    pub const TLS_ECDHE_ECDSA_WITH_ARIA_128_GCM_SHA256: u16be = 0xc05c;
    pub const TLS_ECDHE_ECDSA_WITH_ARIA_256_GCM_SHA384: u16be = 0xc05d;
    pub const TLS_ECDH_ECDSA_WITH_ARIA_128_GCM_SHA256: u16be = 0xc05e;
    pub const TLS_ECDH_ECDSA_WITH_ARIA_256_GCM_SHA384: u16be = 0xc05f;
    pub const TLS_ECDHE_RSA_WITH_ARIA_128_GCM_SHA256: u16be = 0xc060;
    pub const TLS_ECDHE_RSA_WITH_ARIA_256_GCM_SHA384: u16be = 0xc061;
    pub const TLS_ECDH_RSA_WITH_ARIA_128_GCM_SHA256: u16be = 0xc062;
    pub const TLS_ECDH_RSA_WITH_ARIA_256_GCM_SHA384: u16be = 0xc063;
    pub const TLS_PSK_WITH_ARIA_128_CBC_SHA256: u16be = 0xc064;
    pub const TLS_PSK_WITH_ARIA_256_CBC_SHA384: u16be = 0xc065;
    pub const TLS_DHE_PSK_WITH_ARIA_128_CBC_SHA256: u16be = 0xc066;
    pub const TLS_DHE_PSK_WITH_ARIA_256_CBC_SHA384: u16be = 0xc067;
    pub const TLS_RSA_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc07a;
    pub const TLS_RSA_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc07b;
    pub const TLS_DHE_RSA_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc07c;
    pub const TLS_DHE_RSA_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc07d;
    pub const TLS_DH_RSA_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc07e;
    pub const TLS_DH_RSA_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc07f;
    pub const TLS_DHE_DSS_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc080;
    pub const TLS_DHE_DSS_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc081;
    pub const TLS_DH_DSS_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc082;
    pub const TLS_DH_DSS_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc083;
    pub const TLS_DH_anon_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc084;
    pub const TLS_DH_anon_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc085;
    pub const TLS_ECDHE_ECDSA_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc086;
    pub const TLS_ECDHE_ECDSA_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc087;
    pub const TLS_ECDH_ECDSA_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc088;
    pub const TLS_ECDH_ECDSA_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc089;
    pub const TLS_ECDHE_RSA_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc08a;
    pub const TLS_ECDHE_RSA_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc08b;
    pub const TLS_ECDH_RSA_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc08c;
    pub const TLS_ECDH_RSA_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc08d;
    pub const TLS_PSK_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc08e;
    pub const TLS_PSK_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc08f;
    pub const TLS_DHE_PSK_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc090;
    pub const TLS_DHE_PSK_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc091;
    pub const TLS_RSA_PSK_WITH_CAMELLIA_128_GCM_SHA256: u16be = 0xc092;
    pub const TLS_RSA_PSK_WITH_CAMELLIA_256_GCM_SHA384: u16be = 0xc093;
    pub const TLS_PSK_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0xc094;
    pub const TLS_PSK_WITH_CAMELLIA_256_CBC_SHA384: u16be = 0xc095;
    pub const TLS_DHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0xc096;
    pub const TLS_DHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: u16be = 0xc097;
    pub const TLS_RSA_PSK_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0xc098;
    pub const TLS_RSA_PSK_WITH_CAMELLIA_256_CBC_SHA384: u16be = 0xc099;
    pub const TLS_ECDHE_PSK_WITH_CAMELLIA_128_CBC_SHA256: u16be = 0xc09a;
    pub const TLS_ECDHE_PSK_WITH_CAMELLIA_256_CBC_SHA384: u16be = 0xc09b;
    pub const TLS_RSA_WITH_AES_128_CCM: u16be = 0xc09c;
    pub const TLS_RSA_WITH_AES_256_CCM: u16be = 0xc09d;
    pub const TLS_DHE_RSA_WITH_AES_128_CCM: u16be = 0xc09e;
    pub const TLS_DHE_RSA_WITH_AES_256_CCM: u16be = 0xc09f;
    pub const TLS_RSA_WITH_AES_128_CCM_8: u16be = 0xc0a0;
    pub const TLS_RSA_WITH_AES_256_CCM_8: u16be = 0xc0a1;
    pub const TLS_DHE_RSA_WITH_AES_128_CCM_8: u16be = 0xc0a2;
    pub const TLS_DHE_RSA_WITH_AES_256_CCM_8: u16be = 0xc0a3;
    pub const TLS_PSK_WITH_AES_128_CCM: u16be = 0xc0a4;
    pub const TLS_PSK_WITH_AES_256_CCM: u16be = 0xc0a5;
    pub const TLS_DHE_PSK_WITH_AES_128_CCM: u16be = 0xc0a6;
    pub const TLS_DHE_PSK_WITH_AES_256_CCM: u16be = 0xc0a7;
    pub const TLS_PSK_WITH_AES_128_CCM_8: u16be = 0xc0a8;
    pub const TLS_PSK_WITH_AES_256_CCM_8: u16be = 0xc0a9;
    pub const TLS_PSK_DHE_WITH_AES_128_CCM_8: u16be = 0xc0aa;
    pub const TLS_PSK_DHE_WITH_AES_256_CCM_8: u16be = 0xc0ab;
    pub const TLS_ECDHE_ECDSA_WITH_AES_128_CCM: u16be = 0xc0ac;
    pub const TLS_ECDHE_ECDSA_WITH_AES_256_CCM: u16be = 0xc0ad;
    pub const TLS_ECDHE_ECDSA_WITH_AES_128_CCM_8: u16be = 0xc0ae;
    pub const TLS_ECDHE_ECDSA_WITH_AES_256_CCM_8: u16be = 0xc0af;
    pub const TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: u16be = 0xcca8;
    pub const TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: u16be = 0xcca9;
    pub const TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256: u16be = 0xccaa;
    pub const TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: u16be = 0xccab;
    pub const TLS_ECDHE_PSK_WITH_CHACHA20_POLY1305_SHA256: u16be = 0xccac;
    pub const TLS_DHE_PSK_WITH_CHACHA20_POLY1305_SHA256: u16be = 0xccad;
    pub const TLS_RSA_PSK_WITH_CHACHA20_POLY1305_SHA256: u16be = 0xccae;
}

